generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttestationTypeEnum {
  direct
  indirect
  none
}

enum UserVerificationTypeEnum {
  required
  preferred
  discouraged
}

model FidoOptions {
  id     String  @id @default(uuid())
  client Client?

  attestation                     AttestationTypeEnum      @default(direct)
  // authenticatorAttachment can only be 'cross-platform' or 'platform'
  // Unfortunately Prisma doesn't allow mapping enums to custom values, and they
  // also don't allow '-' characters, which means that this must be a String and not a Enum
  authenticatorAttachment         String?
  authenticatorRequireResidentKey Boolean?
  authenticatorUserVerification   UserVerificationTypeEnum @default(preferred)
  challengeSize                   Int                      @default(64)
  // Prisma does not allow default values for arrays, so set this in code
  cryptoParams                    Int[]
  rpIcon                          String?
  rpId                            String?
  rpName                          String?
  timeout                         Int                      @default(60000)
  createdAt                       DateTime                 @default(now())
}

// A client is a person who signs up at the head app. They recieve a private and public key which we use to recognize them.
model Client {
  id            String      @id @default(uuid())
  fidoOptions   FidoOptions @relation(fields: [fidoOptionsId], references: [id])
  fidoOptionsId String      @unique
  email         String      @unique
  password      String?
  roles         String[]
  accounts      Account[]
  createdAt     DateTime    @default(now())
  publicApiKey  String      @unique
  privateApiKey String      @unique
}

// TODO: Use these in allowedCredentials with assertionExpectations
// This represents a FIDO capable device; something that the user can use to actually authenticate
model Authenticator {
  id                  String   @id @default(uuid())
  credentialId        String
  type                String
  transports          String[] // TODO: Turn this into a ENUM
  credentialPublicKey String
  authCounter         Int      @default(0) // TODO: Probably need to increment this on sign in/sign up
  // When a user tries to register a new device,
  // send an email to them where they have to confirm that it was really them and set enabled to true
  enabled             Boolean  @default(false)

  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  createdAt DateTime @default(now())

  verificationToken           String?
  // FIXME: This sets an interval for 3 hours instead of 1 hour (GMT+2 + 1 hour interval)
  verificationTokenValidUntil DateTime? @default(dbgenerated("NOW() + interval '1 hour'"))

  @@unique([credentialId, accountId])
  @@unique([verificationToken, accountId])
}

// Accounts belong to clients. Accounts are the end users of our clients.
model Account {
  id                   String          @id @default(uuid())
  email                String
  attestationChallenge String? // TODO: Delete this from database after using it
  assertionChallenge   String? // TODO: Delete this from database after using it
  client               Client          @relation(fields: [clientId], references: [id])
  clientId             String
  authenticators       Authenticator[]
  createdAt            DateTime        @default(now())

  @@unique([email, clientId])
}
